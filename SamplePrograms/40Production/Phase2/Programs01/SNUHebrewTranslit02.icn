# This program reads a series of ISO-8859-8 (Hebrew) encoded HTML Tanach files and 
# transliterates them for later processing.

global translit, fileName, csetSpace, space

procedure main()

  # Constants
  space := "\x20"; comma := "\x2C"; period := "\x2E"
  colon := "\x3A"; semicolon := "\x3B"
  leftBrace := "\x7B"; rightBrace := "\x7D"
  csetSpace := ' '

# Translation Table
  translit := table("")
  translit["\xE0"] := "A" # Aleph
  translit["\xE1"] := "B" # Beth
  translit["\xE2"] := "G" # Gimel
  translit["\xE3"] := "D" # Daleth
  translit["\xE4"] := "H" # He
  translit["\xE5"] := "V" # Vav or Waw
  translit["\xE6"] := "Z" # Zayin
  translit["\xE7"] := "X" # Heth or Cheth
  translit["\xE8"] := "+" # Teth
  translit["\xE9"] := "Y" # Yod
  translit["\xEA"] := "K" # Kaph Sofit (Final Kapf)
  translit["\xEB"] := "K" # Kaph
  translit["\xEC"] := "L" # Lamed
  translit["\xED"] := "M" # Mem Sofit (Final Mem)
  translit["\xEE"] := "M" # Mem
  translit["\xEF"] := "N" # Nun Sofit (Final Nun)
  translit["\xF0"] := "N" # Nun
  translit["\xF1"] := "$" # Samek
  translit["\xF2"] := "@" # Ayin
  translit["\xF3"] := "P" # Pe Sofit (Final Pe)
  translit["\xF4"] := "P" # Pe
  translit["\xF5"] := "C" # Tsade Sofit (Final Tsade)
  translit["\xF6"] := "C" # Tsade
  translit["\xF7"] := "Q" # Qoph
  translit["\xF8"] := "R" # Resh
  translit["\xF9"] := "S" # Sin / Shin
  translit["\xFA"] := "T" # Tav or Taw
  translit[","]    := ""  # Comma
  translit["."]    := ""  # Period
  translit[";"]    := ""  # Semicolon
  translit[":"]    := ""  # Colon
  translit[" "]    := " " # Space
  translit["\xAF"] := " " # Dash

  bookNames := table("")
  file00 := open("BookNames.txt","r") | stop("Can't open BookNames.txt.")
  while lineIn := read(file00) do { # Load all the book names into a table.
    bookNames[lineIn[1:3]] := lineIn[4:7]
  }
  close(file00)
  
  file00 := open("FileNames.txt","r") | stop("Cannot open FileNames.txt.")
  gTotalVerseCount   := 0 # Total over the entire Tanach.
  gTotalChapterCount := 0 # Total over the entire Tanach.
  file03 := open("Snu_Statistics.txt","w") | stop("Cannot open Snu_Statistics.txt.")
  write(file03,"Snunit Hebrew","\n")
  while (fileNameIn := read(file00)) do { # Begin outer while. (Process chapters.)
    book := bookNames[fileNameIn[1:3]]
    chapNum := fileNameIn[9:12]
    fileNameOut := fileNameIn[1:3] || "_" || book || chapNum || ".txt"
    file01 := open(fileNameIn,"r")  | stop("Cannot open ",fileNameIn)
    file02 := open(fileNameOut,"w") | stop("Cannot open ",fileNameOut)
    verseCount := 0
    chapCount := 0
    oldVerseNumber := ""; verseNumber := ""; concatTextIn := ""
    hebrewEncountered := 0
    write("Book == ",book,"  Input == ",fileNameIn,"  Output == ",fileNameOut)
    while (lineIn := trim(read(file01))) do { # Begin inner while. (Process lines.)
      if lineIn[1:15] == "</pre></table>" then {hebrewEncountered := 1; next}
      if lineIn == "</pre>" then {hebrewEncountered := 0; break}
      if hebrewEncountered = 1 then {
        textIn := ""; beginText := 0
        lineIn ? {
          if tab(find("name=")) then {
            move(6)
            verseNumber := tab(find("\""))
            tab(find("<pre>"))
            move(5)
            beginText := &pos # Scripture starts right after the "<pre>".
            textIn := trim(tab(find("<"))) # Scripture with link removed. Case 1.
            textIn := reverse(trim(reverse(textIn))) # Remove spaces.
            #write(file02,*textIn," ",beginText," ","textIn1 == ",textIn)
          }
        }
        if ((*textIn < 1) & (beginText > 0)) then { # Beginning of scripture.
          text1 := trim(reverse(lineIn[beginText:0]))
          text2 := "" 
          text1 ? {
            if tab(find("     ")) then { # Five spaces separate scripture from reference.
              move(5)
              text2 := text1[&pos:0]
              textIn := reverse(text2) # Scripture with reference removed. Case 2.
            }
            else {
              if tab(find("    ")) then { # Four spaces separate scripture from reference.
                move(4)
                text2 := text1[&pos:0]
                textIn := reverse(text2) # Scripture with reference removed. Case 2.
              }
            }
          }
          #write(file02,*textIn," ",beginText," ","textIn2 == ",textIn)
        }
        if (*textIn < 1) then {
          textIn := reverse(trim(reverse(lineIn))) # No link or reference. Case 3
          #write(file02,*textIn," ",beginText," ","textIn3 == ",textIn)
        }
        textIn ? {
          if tab(find("{\xF4}  ")) then { # Paragraph marker.
            move(5)
            textIn := textIn[&pos:0] # Remove paragraph marker.
          }
        }
        if verseNumber ~== oldVerseNumber then {
          write(file02,book," ",("00" || chapNum)[-3:0],":",
                ("00" || oldVerseNumber)[-3:0]," ",
                trans(concatTextIn)) # Write a verse.
          concatTextIn := textIn
          oldVerseNumber := verseNumber
        }
        else {
          concatTextIn := textIn || " " || concatTextIn
        }
      }
    } # End Inner While. (Process lines.)
    write(file02,book," ",("00" || chapNum)[-3:0],":",("00" || oldVerseNumber)[-3:0],
          " ",trans(concatTextIn)) # Write the last verse in the chapter.
    close(file01); close(file02)
  } # End Outer While. (Process chapters.)
end

procedure trans(textIn)
  textIn := trim(textIn)
  textIn := trim(reverse(textIn))
  textOut1 := ""; textOut := ""
  every i := 1 to *textIn do {
    textOut1 ||:= translit[textIn[i]]
  }
  textOut1 ||:= space
  textOut1 ? {
    while &pos < *textOut1 do {
      textOut ||:= tab(upto(csetSpace)) || space
      tab(many(csetSpace))
    }
  }
return textOut
end
