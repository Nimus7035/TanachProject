# This program reads a section of scripture and computes Panin scores for the section.
# The input arguments are: 
# 1) Starting Book (three characters) eg. "Gen".
# 2) Starting Chapter (up to three digits).
# 3) Starting Verse (up to three digits).
# 4) Ending Book (three characters) eg. "Gen".
# 5) Ending Chapter (up to three digits).
# 6) Ending Verse (up to three digits).


link factors # Used to compute factors.

global file02, file03, cVowels, cConsonants, nVal, pVal, numberOfSections, 
       sectionScores, sectionNames, prevSectionName, verseNumber, forms, diagsFileName

procedure main(args)

# Begin initializations.
  if /args[1] | (*args < 6) then 
    stop("Usage: PaninScoresBySection03.exe filePrefix StartBook StartChap",
         "StartVerse EndBook EndChap EndVerse")

  bookNumbers := table(0)
  bookNumbers["Gen"] := 1
  bookNumbers["Exo"] := 2
  bookNumbers["Lev"] := 3
  bookNumbers["Num"] := 4
  bookNumbers["Deu"] := 5
  bookNumbers["Jos"] := 6
  bookNumbers["Jud"] := 7
  bookNumbers["1Sa"] := 8
  bookNumbers["2Sa"] := 9
  bookNumbers["1Ki"] := 10
  bookNumbers["2Ki"] := 11
  bookNumbers["Isa"] := 12
  bookNumbers["Jer"] := 13
  bookNumbers["Eze"] := 14
  bookNumbers["Hos"] := 15
  bookNumbers["Joe"] := 16
  bookNumbers["Amo"] := 17
  bookNumbers["Oba"] := 18
  bookNumbers["Jon"] := 19
  bookNumbers["Mic"] := 20
  bookNumbers["Nah"] := 21
  bookNumbers["Hab"] := 22
  bookNumbers["Zep"] := 23
  bookNumbers["Hag"] := 24
  bookNumbers["Zec"] := 25
  bookNumbers["Mal"] := 26
  bookNumbers["Psa"] := 27
  bookNumbers["Pro"] := 28
  bookNumbers["Job"] := 29
  bookNumbers["Son"] := 30
  bookNumbers["Rut"] := 31
  bookNumbers["Lam"] := 32
  bookNumbers["Ecc"] := 33
  bookNumbers["Est"] := 34
  bookNumbers["Dan"] := 35
  bookNumbers["Ezr"] := 36
  bookNumbers["Neh"] := 37
  bookNumbers["1Ch"] := 38
  bookNumbers["2Ch"] := 39

  bookNumber := bookNumbers[args[1]]
  bookNumber := ("0" || bookNumber)[-2:0]

  filePrefix := ".\\Results\\" || bookNumber || args[1] || "\\" || args[1] || args[2] || "_" || args[3] ||
                     "-" || args[4] || args[5] || "_"  || args[6] || "\\Scores\\"
  fileSuffix := args[1] || args[2] || "_" || args[3] || "-" || args[4] || 
                args[5] || "_" || args[6]
  cVowels := 'AHVY'; cConsonants := 'BGDZX+KLMN$@PCQRST'

  nVal := table(0) # Numeric Values
  nVal["A"] := 1   # Aleph
  nVal["B"] := 2   # Beth
  nVal["G"] := 3   # Gimel
  nVal["D"] := 4   # Daleth
  nVal["H"] := 5   # He
  nVal["V"] := 6   # Vav
  nVal["Z"] := 7   # Zayin
  nVal["X"] := 8   # Heth
  nVal["+"] := 9   # Teth
  nVal["Y"] := 10  # Yod
  nVal["K"] := 20  # Kaph
  nVal["L"] := 30  # Lamed
  nVal["M"] := 40  # Mem
  nVal["N"] := 50  # Nun
  nVal["$"] := 60  # Samek
  nVal["@"] := 70  # Ayin
  nVal["P"] := 80  # Pe
  nVal["C"] := 90  # Tsade
  nVal["Q"] := 100 # Qoph
  nVal["R"] := 200 # Resh
  nVal["S"] := 300 # Sin/Shin
  nVal["T"] := 400 # Taw

  pVal := table(0) # Place Values
  pVal["A"] := 1   # Aleph
  pVal["B"] := 2   # Beth
  pVal["G"] := 3   # Gimel
  pVal["D"] := 4   # Daleth
  pVal["H"] := 5   # He
  pVal["V"] := 6   # Vav
  pVal["Z"] := 7   # Zayin
  pVal["X"] := 8   # Heth
  pVal["+"] := 9   # Teth
  pVal["Y"] := 10  # Yod
  pVal["K"] := 11  # Kaph
  pVal["L"] := 12  # Lamed
  pVal["M"] := 13  # Mem
  pVal["N"] := 14  # Nun
  pVal["$"] := 15  # Samek
  pVal["@"] := 16  # Ayin
  pVal["P"] := 17  # Pe
  pVal["C"] := 18  # Tsade
  pVal["Q"] := 19  # Qoph
  pVal["R"] := 20  # Resh
  pVal["S"] := 21  # Sin/Shin
  pVal["T"] := 22  # Taw

  inputFileName  := "PaninSectionsInput"    || fileSuffix || ".txt" 
  outputFileName := filePrefix || "PaninSectionScoresOut" || fileSuffix || ".txt"
  diagsFileName  := filePrefix || "PaninSectionDiagsOut"  || fileSuffix || ".txt"
  file01 := open(inputFileName,"r") | 
            stop("Stop: Cannot open ",inputFileName,".")
  file02 := open(outputFileName,"w") | 
            stop("Stop: Cannot open ",outputFileName,".")
  file03 := open(diagsFileName,"w") | 
            stop("Stop: Cannot open ",diagsFileName,".")

  numberOfSections := 0; topOfReport := 1; sectionName := ""; fileLine := ""
  sectionScores := []; sectionNames := []; allTotals := []; forms := set()
  prevSectionName := ""

# Begin main program.
  while (lineIn := trim(read(file01))) do { # Read PaninSectionsInput
    lineIn ||:= " "
    if (lineIn[1:6] == "!File") then { # New Tanach file name
      fileLine := lineIn
      prevSectionName := sectionName # Used for diagnostics.
      sectionName := fileLine[8:16] # The Tanach file name is also the section name.
      put(sectionNames,sectionName) # Add the new section name to the end of the list.
    } 
    if (lineIn[1:9] == "!Section") then { # New Section (contains comments such as 
                                          # the range of verses)
      allTotals := initNewSection(allTotals,topOfReport)
      topOfReport := 0
      write(fileLine)
      write(file02,"\n",fileLine)
      write(lineIn)
      write(file02,lineIn)
    } 
    if (lineIn[1:2] == "$") then {
      write(file02,"\n",repl("_",60)) # New Verse with reference and any variants
      verseNumber := lineIn[10:13] || " "
    }
    if (lineIn[1:4] == ">>>") then { # Only the verse
      verseIn := lineIn[4:0]
      allTotals := processVerse(verseIn,allTotals)
    } 
    #else write(file02,lineIn)
  }
  prevSectionName := sectionName # Used for diagnostics.
  printAllTotals(allTotals) # Print Section Totals
  selectWinner()
end

procedure processVerse(verseIn,allTotals)
  #write("1. In processVerse verseIn == ",verseIn)
  write(file02,"\n",verseNumber,verseIn)
  vowelTotals := processVowels(verseIn)
  allTotals[1][1] +:= vowelTotals[1]
  allTotals[1][2] +:= vowelTotals[2]
  allTotals[1][3] +:= vowelTotals[3]
  consonantTotals := processConsonants(verseIn,vowelTotals)
  allTotals[2][1] +:= consonantTotals[1]
  allTotals[2][2] +:= consonantTotals[2]
  allTotals[2][3] +:= consonantTotals[3]
  allTotals[3][1] +:= vowelTotals[1] + consonantTotals[1]
  allTotals[3][2] +:= vowelTotals[2] + consonantTotals[2]
  allTotals[3][3] +:= vowelTotals[3] + consonantTotals[3]
  wordTotals := processWords(verseIn)
  allTotals[4][1] +:= wordTotals[1] # Total Word Count
  allTotals[4][2] +:= wordTotals[2] # Total Word Place
  allTotals[4][3] +:= wordTotals[3] # Total Word Numeric
  allTotals[5][1] +:= wordTotals[4] # Total Form Count
  allTotals[5][2] +:= wordTotals[5] # Total Form Place
  allTotals[5][3] +:= wordTotals[6] # Total Form Numeric
  allTotals[6][1] +:= wordTotals[7] # Total vWord Count
  allTotals[6][2] +:= wordTotals[8] # Total vWord Place
  allTotals[6][3] +:= wordTotals[9] # Total vWord Numeric
  allTotals[7][1] +:= wordTotals[10] # Total cWord Count
  allTotals[7][2] +:= wordTotals[11] # Total cWord Place
  allTotals[7][3] +:= wordTotals[12] # Total cWord Numeric
  allTotals[8][1] +:= wordTotals[13] # Total Wordv Count
  allTotals[8][2] +:= wordTotals[14] # Total Wordv Place
  allTotals[8][3] +:= wordTotals[15] # Total Wordv Numeric
  allTotals[9][1] +:= wordTotals[16] # Total Wordc Count
  allTotals[9][2] +:= wordTotals[17] # Total Wordc Place
  allTotals[9][3] +:= wordTotals[18] # Total Wordc Numeric
  allTotals[10][1] +:= wordTotals[19] # Total oWord Count
  allTotals[10][2] +:= wordTotals[20] # Total oWord Place
  allTotals[10][3] +:= wordTotals[21] # Total oWord Numeric
  allTotals[11][1] +:= wordTotals[22] # Total eWord Count
  allTotals[11][2] +:= wordTotals[23] # Total eWord Place
  allTotals[11][3] +:= wordTotals[24] # Total eWord Numeric
  allTotals[12][1] +:= wordTotals[25] # Total vForm Count
  allTotals[12][2] +:= wordTotals[26] # Total vForm Place
  allTotals[12][3] +:= wordTotals[27] # Total vForm Numeric
  allTotals[13][1] +:= wordTotals[28] # Total cForm Count
  allTotals[13][2] +:= wordTotals[29] # Total cForm Place
  allTotals[13][3] +:= wordTotals[30] # Total cForm Numeric
  allTotals[14][1] +:= wordTotals[31] # Total Formv Count
  allTotals[14][2] +:= wordTotals[32] # Total Formv Place
  allTotals[14][3] +:= wordTotals[33] # Total Formv Numeric
  allTotals[15][1] +:= wordTotals[34] # Total Formc Count
  allTotals[15][2] +:= wordTotals[35] # Total Formc Place
  allTotals[15][3] +:= wordTotals[36] # Total Formc Numeric
  allTotals[16][1] +:= wordTotals[37] # Total oForm Count
  allTotals[16][2] +:= wordTotals[38] # Total oForm Place
  allTotals[16][3] +:= wordTotals[39] # Total oForm Numeric
  allTotals[17][1] +:= wordTotals[40] # Total eForm Count
  allTotals[17][2] +:= wordTotals[41] # Total eForm Place
  allTotals[17][3] +:= wordTotals[42] # Total eForm Numeric
  return allTotals
end

procedure processVowels(verseIn)
  totalCount := totalPlace := totalNum := vowelCount := 0 
  every (verseIn ? {upto(cVowels) & move(1)}) do vowelCount +:= 1
  write(file02,"\nvowelCount == ",vowelCount,"   ",formatFactors(vowelCount))
  write(file02,"             ","Count","  Place"," Numeric","                    Count",
    "                    Place","                  Numeric")
  vOut := valuesOut("Aleph","A",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("He","H",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Vav","V",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Yod","Y",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  write(file02,left(" ",14),right("---",4),right("------",7),
        right("-------",8),right("-----------------------",25),
        right("-----------------------",25),right("-----------------------",25))
  write(file02,left("Vowel Totals",14),right(totalCount,4),right(totalPlace,7),
        right(totalNum,8),right(formatFactors(totalCount),25),
        right(formatFactors(totalPlace),25),right(formatFactors(totalNum),25))
  if vowelCount ~= totalCount then stop("vowelCount is not equal to totalCount.")
  return [totalCount,totalPlace,totalNum]
end

procedure processConsonants(verseIn,vowelTotals)
  totalCount := totalPlace := totalNum := consonantCount := 0 
  every (verseIn ? {upto(cConsonants) & move(1)}) do consonantCount +:= 1
  write(file02,"\nconsonantCount == ",consonantCount,"   ",formatFactors(consonantCount))
  write(file02,"             ","Count","  Place"," Numeric","                    Count",
    "                    Place","                  Numeric")
  vOut := valuesOut("Beth","B",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Gimel","G",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Daleth","D",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Zayin","Z",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Heth","X",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Teth","+",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Kaph","K",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Lamed","L",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Mem","M",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Nun","N",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Samek","$",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Ayin","@",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Pe","P",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Tsade","C",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Qoph","Q",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Resh","R",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Sin/Shin","S",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Taw","T",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  totalCharCount := totalCount + vowelTotals[1] # Combine Vowel totals and Consonant totals.
  totalCharPlace := totalPlace + vowelTotals[2]
  totalCharNum   := totalNum   + vowelTotals[3]
  write(file02,left(" ",14),right("---",4),right("------",7),
        right("-------",8),right("-----------------------",25),
        right("-----------------------",25),right("-----------------------",25))
  write(file02,left("Con Totals",14),right(totalCount,4),right(totalPlace,7),
        right(totalNum,8),right(formatFactors(totalCount),25),
        right(formatFactors(totalPlace),25),right(formatFactors(totalNum),25))
  write(file02,left("Char Totals",14),right(totalCharCount,4),right(totalCharPlace,7),
        right(totalCharNum,8),right(formatFactors(totalCharCount),25),
        right(formatFactors(totalCharPlace),25),right(formatFactors(totalCharNum),25))
  if (consonantCount ~= totalCount) then stop("consonantCount is not equal to totalCount.")
  return [totalCount,totalPlace,totalNum]
end

procedure processWords(verseIn)
  #write("3. In processWords verseIn == ",verseIn)
  wordCount := 0; formCount := 0; words := table(0); w := ""; i := 0
  while (*verseIn > 1) do { # Make a table of all the words.
    verseIn ? { 
    w := tab(upto(' '))
    i +:= 1
    words[w] +:= 1
    wordCount +:= 1 
    insert(forms,w) # Record the unique forms. This set is global, 
#                    and represents the entire section not just one verse.
    tab(many(' '))
    verseIn := verseIn[&pos:0]
    } 
  }
  formCount := *words # Number of unique words
  write(file02,"\nwordCount == ",wordCount,"   ",formatFactors(wordCount),
               "      formCount == ",formCount,"   ",formatFactors(formCount))
  write(file02,"             ","Count","  Place"," Numeric","                    Count",
               "                    Place","                  Numeric")
  sWords := sort(words,1) # Sorted word table
  wordTotals := wordValuesOut(sWords) 
  return wordTotals
end

procedure wordValuesOut(sWords)
  wordCount := wordPlace := wordNum := 0  # Initializations
  totalWordCount := totalWordPlace := totalWordNum := 0  # Initializations
  formPlace := formNum := totalFormPlace := totalFormNum := 0  # Initializations
  totalCharCount := totalCharPlace := totalCharNum := 0  # Initializations
  totalFormCount := *sWords  # Initializations
  vWordCount := vWordPlace := vWordNum := totalVWordCount := totalVWordPlace := totalVWordNum := 0
  cWordCount := cWordPlace := cWordNum := totalCWordCount := totalCWordPlace := totalCWordNum := 0
  vFormCount := vFormPlace := vFormNum := totalVFormCount := totalVFormPlace := totalVFormNum := 0
  cFormCount := cFormPlace := cFormNum := totalCFormCount := totalCFormPlace := totalCFormNum := 0
  wordVCount := wordVPlace := wordVNum := totalWordVCount := totalWordVPlace := totalWordVNum := 0
  wordCCount := wordCPlace := wordCNum := totalWordCCount := totalWordCPlace := totalWordCNum := 0
  formVCount := formVPlace := formVNum := totalFormVCount := totalFormVPlace := totalFormVNum := 0
  formCCount := formCPlace := formCNum := totalFormCCount := totalFormCPlace := totalFormCNum := 0
  oWordCount := oWordPlace := oWordNum := totalOWordCount := totalOWordPlace := totalOWordNum := 0
  eWordCount := eWordPlace := eWordNum := totalEWordCount := totalEWordPlace := totalEWordNum := 0
  oFormCount := oFormPlace := oFormNum := totalOFormCount := totalOFormPlace := totalOFormNum := 0
  eFormCount := eFormPlace := eFormNum := totalEFormCount := totalEFormPlace := totalEFormNum := 0
  every i := 1 to *sWords do { # Process each word
    word := sWords[i][1]
    wordCount := sWords[i][2]
    totalWordCount +:= sWords[i][2]
    totalFormCount +:= 1
    wordPlace := wordNum := formPlace := formNum := 0
    word ? {while (letter := move(1)) do {
      wordPlace +:= pVal[letter] * wordCount
      formPlace +:= pVal[letter]
      totalWordPlace +:= pVal[letter] * wordCount
      totalFormPlace +:= pVal[letter]
      wordNum +:= nVal[letter] * wordCount
      formNum +:= nVal[letter]
      totalWordNum   +:= nVal[letter] * wordCount
      totalFormNum   +:= nVal[letter]
      totalCharCount +:= wordCount
      totalCharPlace +:= pVal[letter] * wordCount
      totalCharNum   +:= nVal[letter] * wordCount
      }
    }
    if member(cVowels,word[1:2]) then { # Words starting with vowels
      totalVWordCount +:= wordCount
      totalVFormCount +:= 1
      totalVWordPlace +:= wordPlace
      totalVFormPlace +:= formPlace
      totalVWordNum +:= wordNum
      totalVFormNum +:= formNum
    }
    if member(cConsonants,word[1:2]) then { # Words starting with consonants
      totalCWordCount +:= wordCount
      totalCFormCount +:= 1
      totalCWordPlace +:= wordPlace
      totalCFormPlace +:= formPlace
      totalCWordNum +:= wordNum
      totalCFormNum +:= formNum
    }
    if member(cVowels,word[-1:0]) then { # Words ending in vowels
      totalWordVCount +:= wordCount
      totalFormVCount +:= 1
      totalWordVPlace +:= wordPlace
      totalFormVPlace +:= formPlace
      totalWordVNum +:= wordNum
      totalFormVNum +:= formNum
    }
    if member(cConsonants,word[-1:0]) then { # Words ending in consonants
      totalWordCCount +:= wordCount
      totalFormCCount +:= 1
      totalWordCPlace +:= wordPlace
      totalFormCPlace +:= formPlace
      totalWordCNum +:= wordNum
      totalFormCNum +:= formNum
    }
    if (*word % 2) = 1 then { # Odd words/forms
      totalOWordCount +:= wordCount
      totalOFormCount +:= 1
      totalOWordPlace +:= wordPlace
      totalOFormPlace +:= formPlace
      totalOWordNum +:= wordNum
      totalOFormNum +:= formNum
    }
    if (*word % 2) = 0 then { # Even words/forms
      totalEWordCount +:= wordCount
      totalEFormCount +:= 1
      totalEWordPlace +:= wordPlace
      totalEFormPlace +:= formPlace
      totalEWordNum +:= wordNum
      totalEFormNum +:= formNum
    }
  countFacsOut := formatFactors(wordCount)
  placeFacsOut := formatFactors(wordPlace)
  numFacsOut   := formatFactors(wordNum)
  totalCountFacsOut := formatFactors(totalWordCount)
  totalPlaceFacsOut := formatFactors(totalWordPlace)
  totalNumFacsOut := formatFactors(totalWordNum)
  totalFormCountFacsOut := formatFactors(totalFormCount)
  totalFormPlaceFacsOut := formatFactors(totalFormPlace)
  totalFormNumFacsOut := formatFactors(totalFormNum)
    write(file02,left(word,14),right(wordCount,4),right(wordPlace,7),
          right(wordNum,8),right(countFacsOut,25),
          right(placeFacsOut,25),right(numFacsOut,25))
  } # End of Process Each Word.

# Begin printing the totals for this verse.
    write(file02,left(" ",14),right("---",4),right("------",7),
          right("-------",8),right("-----------------------",25),
          right("-----------------------",25),right("-----------------------",25))
    write(file02,left("Word Totals",14),right(totalWordCount,4),right(totalWordPlace,7),
          right(totalWordNum,8),right(totalCountFacsOut,25),
          right(totalPlaceFacsOut,25),right(totalNumFacsOut,25))
    write(file02,left("Char Totals",14),right(totalCharCount,4),right(totalCharPlace,7),
          right(totalCharNum,8),right(formatFactors(totalCharCount),25),
          right(formatFactors(totalCharPlace),25),right(formatFactors(totalCharNum),25))
    write(file02,left("Form  Totls",14),right(totalFormCount,4),right(totalFormPlace,7),
          right(totalFormNum,8),right(totalFormCountFacsOut,25),
          right(totalFormPlaceFacsOut,25),right(totalFormNumFacsOut,25))
    write(file02,left("vWord Totls",14),right(totalVWordCount,4),right(totalVWordPlace,7),
          right(totalVWordNum,8),right(formatFactors(totalVWordCount),25),
          right(formatFactors(totalVWordPlace),25),right(formatFactors(totalVWordNum),25)) 
    write(file02,left("cWord Totls",14),right(totalCWordCount,4),right(totalCWordPlace,7),
          right(totalCWordNum,8),right(formatFactors(totalCWordCount),25),
          right(formatFactors(totalCWordPlace),25),right(formatFactors(totalCWordNum),25))
    write(file02,left("Wordv Totls",14),right(totalWordVCount,4),right(totalWordVPlace,7),
          right(totalWordVNum,8),right(formatFactors(totalWordVCount),25),
          right(formatFactors(totalWordVPlace),25),right(formatFactors(totalWordVNum),25))
    write(file02,left("Wordc Totls",14),right(totalWordCCount,4),right(totalWordCPlace,7),
          right(totalWordCNum,8),right(formatFactors(totalWordCCount),25),
          right(formatFactors(totalWordCPlace),25),right(formatFactors(totalWordCNum),25))
    write(file02,left("oWord Totls",14),right(totalOWordCount,4),right(totalOWordPlace,7),
          right(totalOWordNum,8),right(formatFactors(totalOWordCount),25),
          right(formatFactors(totalOWordPlace),25),right(formatFactors(totalOWordNum),25))
    write(file02,left("eWord Totls",14),right(totalEWordCount,4),right(totalEWordPlace,7),
          right(totalEWordNum,8),right(formatFactors(totalEWordCount),25),
          right(formatFactors(totalEWordPlace),25),right(formatFactors(totalEWordNum),25))
    write(file02,left("vForm Totls",14),right(totalVFormCount,4),right(totalVFormPlace,7),
          right(totalVFormNum,8),right(formatFactors(totalVFormCount),25),
          right(formatFactors(totalVFormPlace),25),right(formatFactors(totalVFormNum),25))
    write(file02,left("cForm Totls",14),right(totalCFormCount,4),right(totalCFormPlace,7),
          right(totalCFormNum,8),right(formatFactors(totalCFormCount),25),
          right(formatFactors(totalCFormPlace),25),right(formatFactors(totalCFormNum),25))
    write(file02,left("Formv Totls",14),right(totalFormVCount,4),right(totalFormVPlace,7),
          right(totalFormVNum,8),right(formatFactors(totalFormVCount),25),
          right(formatFactors(totalFormVPlace),25),right(formatFactors(totalFormVNum),25))
    write(file02,left("Formc Totls",14),right(totalFormCCount,4),right(totalFormCPlace,7),
          right(totalFormCNum,8),right(formatFactors(totalFormCCount),25),
          right(formatFactors(totalFormCPlace),25),right(formatFactors(totalFormCNum),25))
    write(file02,left("oForm Totls",14),right(totalOFormCount,4),right(totalOFormPlace,7),
          right(totalOFormNum,8),right(formatFactors(totalOFormCount),25),
          right(formatFactors(totalOFormPlace),25),right(formatFactors(totalOFormNum),25))
    write(file02,left("eForm Totls",14),right(totalEFormCount,4),right(totalEFormPlace,7),
          right(totalEFormNum,8),right(formatFactors(totalEFormCount),25),
          right(formatFactors(totalEFormPlace),25),right(formatFactors(totalEFormNum),25))
# End printing the totals for this verse.

# Return all the totals.
    return [totalWordCount,totalWordPlace,totalWordNum,
            totalFormCount,totalFormPlace,totalFormNum,
            totalVWordCount,totalVWordPlace,totalVWordNum,
            totalCWordCount,totalCWordPlace,totalCWordNum,
            totalWordVCount,totalWordVPlace,totalWordVNum,
            totalWordCCount,totalWordCPlace,totalWordCNum,
            totalOWordCount,totalOWordPlace,totalOWordNum,
            totalEWordCount,totalEWordPlace,totalEWordNum,
            totalVFormCount,totalVFormPlace,totalVFormNum,
            totalCFormCount,totalCFormPlace,totalCFormNum,
            totalFormVCount,totalFormVPlace,totalFormVNum,
            totalFormCCount,totalFormCPlace,totalFormCNum,
            totalOFormCount,totalOFormPlace,totalOFormNum,
            totalEFormCount,totalEFormPlace,totalEFormNum]        
end

procedure valuesOut(charName,char,verseIn)
  charCount := 0
  every (verseIn ? {upto(char) & move(1)}) do charCount +:= 1
  charPlace := charCount * pVal[char]
  charNum   := charCount * nVal[char]
  charCountFacsOut := formatFactors(charCount)
  charPlaceFacsOut := formatFactors(charPlace)
  charNumFacsOut   := formatFactors(charNum)
  write(file02,left(charName,14),right(charCount,4),right(charPlace,7),
                                 right(charNum,8),right(charCountFacsOut,25),
                                 right(charPlaceFacsOut,25),right(charNumFacsOut,25))
  return [charCount,charPlace,charNum]
end

procedure formatFactors(count)
  facs := factors(count)
  facsOut := ""
  every i := 1 to *facs do {
    if i > 1 then spx := "x" else spx := ""
    facsOut ||:= spx || facs[i]
  }
  if *facsOut < 1 then facsOut := count
return facsOut
end

procedure initNewSection(allTotals,topOfReport)
  if (topOfReport = 0) then {
    printAllTotals(allTotals)
    write(file02,"\n",repl("-",112),"\n",repl("-",112))
  }
  vowelTotals := [0,0,0] # Total number of vowels.
  consonantTotals := [0,0,0] # Total number of consonants.
  charTotals  := [0,0,0] # Total number of letters.
  wordTotals  := [0,0,0] # Total number of words.
  formTotals  := [0,0,0] # Total number of forms (unique words).
  vWordTotals := [0,0,0] # Words starting with a vowel.
  cWordTotals := [0,0,0] # Words starting with a consonant.
  wordVTotals := [0,0,0] # Words ending with a vowel.
  wordCTotals := [0,0,0] # Words ending with a consonant.
  oWordTotals := [0,0,0] # Words with an odd number of characters.
  eWordTotals := [0,0,0] # Words with an even number of characters.
  vFormTotals := [0,0,0] # Forms starting with a vowel.
  cFormTotals := [0,0,0] # Forms starting with a consonant.
  formVTotals := [0,0,0] # Forms ending with a vowel.
  formCTotals := [0,0,0] # Forms ending with a consonant.
  oFormTotals := [0,0,0] # Forms with an odd number of characters.
  eFormTotals := [0,0,0] # Forms with an even number of characters.
  allTotals := [vowelTotals,consonantTotals,charTotals,wordTotals,formTotals,
                vWordTotals,cWordTotals,wordVTotals,wordCTotals,oWordTotals,
                eWordTotals,vFormTotals,cFormTotals,formVTotals,formCTotals,
                oFormTotals,eFormTotals]
  return allTotals
end

procedure fixFormTotals(allTotals) 
# This procedure fixes all the Form Totals. As it turns out, the form totals printed by 
# printAllTotals(allTotals) should reflect the unique forms for the entire section NOT 
# the total of the unique forms for each verse. There IS a difference.

  totalFormPlace  := totalFormNum    := 0 # Initializations

  totalVFormCount := totalCFormCount := 0 # Initializations
  totalFormVCount := totalFormCCount := 0 # Initializations
  totalOFormCount := totalEFormCount := 0 # Initializations

  totalVFormPlace := totalCFormPlace := 0 # Initializations
  totalFormVPlace := totalFormCPlace := 0 # Initializations
  totalOFormPlace := totalEFormPlace := 0 # Initializations

  totalVFormNum   := totalCFormNum   := 0 # Initializations
  totalFormVNum   := totalFormCNum   := 0 # Initializations
  totalOFormNum   := totalEFormNum   := 0 # Initializations

  formList  := sort(forms) # Convert the set of unique forms to a list for processing.
  totalFormCount := *formList # Count of unique forms.
  write(file03,"Section Name: ",prevSectionName,
               "  <<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>")
  every i := 1 to totalFormCount do {
    write(file03,"formList[",i,"] == ",formList[i]) # Diagnostic
  }

  every i := 1 to totalFormCount do { # Process each form
    form := formList[i]
    formPlace := 0; formNum := 0
    form ? { while (letter := move(1)) do {
      formPlace      +:= pVal[letter] 
      totalFormPlace +:= pVal[letter]
      formNum        +:= nVal[letter]
      totalFormNum   +:= nVal[letter]
      }
    }
    if member(cVowels,form[1:2]) then { # Forms starting with vowels
      totalVFormCount +:= 1
      totalVFormPlace +:= formPlace
      totalVFormNum   +:= formNum
    }
    if member(cConsonants,form[1:2]) then { # Forms starting with consonants
      totalCFormCount +:= 1
      totalCFormPlace +:= formPlace
      totalCFormNum   +:= formNum
    }
    if member(cVowels,form[-1:0]) then { # Forms ending in vowels
      totalFormVCount +:= 1
      totalFormVPlace +:= formPlace
      totalFormVNum   +:= formNum
    }
    if member(cConsonants,form[-1:0]) then { # Forms ending in consonants
      totalFormCCount +:= 1
      totalFormCPlace +:= formPlace
      totalFormCNum   +:= formNum
    }
    if (*form % 2) = 1 then { # Odd forms
      totalOFormCount +:= 1
      totalOFormPlace +:= formPlace
      totalOFormNum +:= formNum
    }
    if (*form % 2) = 0 then { # Even forms
      totalEFormCount +:= 1
      totalEFormPlace +:= formPlace
      totalEFormNum +:= formNum
    }
  } # End Process Each Form

  allTotals[5][1]  := totalFormCount  # Total Form Count
  allTotals[5][2]  := totalFormPlace  # Total Form Place
  allTotals[5][3]  := totalFormNum    # Total Form Numeric
  allTotals[12][1] := totalVFormCount # Total vForm Count
  allTotals[12][2] := totalVFormPlace # Total vForm Place
  allTotals[12][3] := totalVFormNum   # Total vForm Numeric
  allTotals[13][1] := totalCFormCount # Total cForm Count
  allTotals[13][2] := totalCFormPlace # Total cForm Place
  allTotals[13][3] := totalCFormNum   # Total cForm Numeric
  allTotals[14][1] := totalFormVCount # Total Formv Count
  allTotals[14][2] := totalFormVPlace # Total Formv Place
  allTotals[14][3] := totalFormVNum   # Total Formv Numeric
  allTotals[15][1] := totalFormCCount # Total Formc Count
  allTotals[15][2] := totalFormCPlace # Total Formc Place
  allTotals[15][3] := totalFormCNum   # Total Formc Numeric
  allTotals[16][1] := totalOFormCount # Total oForm Count
  allTotals[16][2] := totalOFormPlace # Total oForm Place
  allTotals[16][3] := totalOFormNum   # Total oForm Numeric
  allTotals[17][1] := totalEFormCount # Total eForm Count
  allTotals[17][2] := totalEFormPlace # Total eForm Place
  allTotals[17][3] := totalEFormNum   # Total eForm Numeric
  return allTotals
end

procedure printAllTotals(allTotals) # Print Section Totals
  allTotals := fixFormTotals(allTotals) # Ensure all forms are counted only once for the section.
  write(file02,repl("*",112))
  write(file02,left("SecVowTotals",14),right(allTotals[1][1],4),right(allTotals[1][2],7),
                                 right(allTotals[1][3],8),right(formatFactors(allTotals[1][1]),25),
                                 right(formatFactors(allTotals[1][2]),25))
#                                 right(formatFactors(allTotals[1][2]),25),right(formatFactors(allTotals[1][3]),25))
  write(file02,left("SecConTotals",14),right(allTotals[2][1],4),right(allTotals[2][2],7),
                                 right(allTotals[2][3],8),right(formatFactors(allTotals[2][1]),25),
                                 right(formatFactors(allTotals[2][2]),25),right(formatFactors(allTotals[2][3]),25))
  write(file02,left("SecChrTotals",14),right(allTotals[3][1],4),right(allTotals[3][2],7),
                                 right(allTotals[3][3],8),right(formatFactors(allTotals[3][1]),25),
                                 right(formatFactors(allTotals[3][2]),25),right(formatFactors(allTotals[3][3]),25))
  write(file02,left("SecWrdTotals",14),right(allTotals[4][1],4),right(" ",7),
                                 right(" ",8),right(formatFactors(allTotals[4][1]),25),
                                 right(" ",25),right(" ",25))
  write(file02,left("Form  Totals",14),right(allTotals[5][1],4),right(allTotals[5][2],7),
                                 right(allTotals[5][3],8),right(formatFactors(allTotals[5][1]),25),
                                 right(formatFactors(allTotals[5][2]),25),right(formatFactors(allTotals[5][3]),25))
  write(file02,left("vWord Totals",14),right(allTotals[6][1],4),right(allTotals[6][2],7),
                                 right(allTotals[6][3],8),right(formatFactors(allTotals[6][1]),25),
                                 right(formatFactors(allTotals[6][2]),25),right(formatFactors(allTotals[6][3]),25))
  write(file02,left("cWord Totals",14),right(allTotals[7][1],4),right(allTotals[7][2],7),
                                 right(allTotals[7][3],8),right(formatFactors(allTotals[7][1]),25),
                                 right(formatFactors(allTotals[7][2]),25),right(formatFactors(allTotals[7][3]),25))
  write(file02,left("Wordv Totals",14),right(allTotals[8][1],4),right(allTotals[8][2],7),
                                 right(allTotals[8][3],8),right(formatFactors(allTotals[8][1]),25),
                                 right(formatFactors(allTotals[8][2]),25),right(formatFactors(allTotals[8][3]),25))
  write(file02,left("Wordc Totals",14),right(allTotals[9][1],4),right(allTotals[9][2],7),
                                 right(allTotals[9][3],8),right(formatFactors(allTotals[9][1]),25),
                                 right(formatFactors(allTotals[9][2]),25),right(formatFactors(allTotals[9][3]),25))
  write(file02,left("oWord Totals",14),right(allTotals[10][1],4),right(allTotals[10][2],7),
                                 right(allTotals[10][3],8),right(formatFactors(allTotals[10][1]),25),
                                 right(formatFactors(allTotals[10][2]),25),right(formatFactors(allTotals[10][3]),25))
  write(file02,left("eWord Totals",14),right(allTotals[11][1],4),right(allTotals[11][2],7),
                                 right(allTotals[11][3],8),right(formatFactors(allTotals[11][1]),25),
                                 right(formatFactors(allTotals[11][2]),25),right(formatFactors(allTotals[11][3]),25))
  write(file02,left("vForm Totals",14),right(allTotals[12][1],4),right(allTotals[12][2],7),
                                 right(allTotals[12][3],8),right(formatFactors(allTotals[12][1]),25),
                                 right(formatFactors(allTotals[12][2]),25),right(formatFactors(allTotals[12][3]),25))
  write(file02,left("cForm Totals",14),right(allTotals[13][1],4),right(allTotals[13][2],7),
                                 right(allTotals[13][3],8),right(formatFactors(allTotals[13][1]),25),
                                 right(formatFactors(allTotals[13][2]),25),right(formatFactors(allTotals[13][3]),25))
  write(file02,left("Formv Totals",14),right(allTotals[14][1],4),right(allTotals[14][2],7),
                                 right(allTotals[14][3],8),right(formatFactors(allTotals[14][1]),25),
                                 right(formatFactors(allTotals[14][2]),25),right(formatFactors(allTotals[14][3]),25))
  write(file02,left("Formc Totals",14),right(allTotals[15][1],4),right(allTotals[15][2],7),
                                 right(allTotals[15][3],8),right(formatFactors(allTotals[15][1]),25),
                                 right(formatFactors(allTotals[15][2]),25),right(formatFactors(allTotals[15][3]),25))
  write(file02,left("oForm Totals",14),right(allTotals[16][1],4),right(allTotals[16][2],7),
                                 right(allTotals[16][3],8),right(formatFactors(allTotals[16][1]),25),
                                 right(formatFactors(allTotals[16][2]),25),right(formatFactors(allTotals[16][3]),25))
  write(file02,left("eForm Totals",14),right(allTotals[17][1],4),right(allTotals[17][2],7),
                                 right(allTotals[17][3],8),right(formatFactors(allTotals[17][1]),25),
                                 right(formatFactors(allTotals[17][2]),25),right(formatFactors(allTotals[17][3]),25))
  numberOfSections +:= 1
  score := commonFactorsScoring(allTotals)
  #write("About to write the score.")
  #write("score: ",score[1][1])
  sectionScores |||:= score
  #write("printAllTotals *sectionScores = ",*sectionScores," sectionScores = "); 
  #every i := 1 to *sectionScores do {
  #write("i=",i," sectionScores[i][1] ",(sectionScores[i][1]) | " "," [i][2][1] ",
  #(sectionScores[i][2][1] | " ")," [i][2][2] ",(sectionScores[i][2][2] | " "))}
  #write(" ")
end

procedure commonFactorsScoring(allTotals)
  sectionFactors := table(0) # Contains scores. The key is the factor.
# Count Vowel, Consonant, and Letter factors.
  i := 1
  while (i <= 3) do { # i is an index on Vowels, Consonants, and Letters.
    j := 1
    while (j <=3) do { # j is an index on Count, Place, and Numeric values.
      #write(file02,"commonFactorsScoring allTotals[",i,"][",j,"] = ",allTotals[i][j])
      facs := factors(allTotals[i][j]) # For vow, con, and chr: factor count, place, and numeric values.
      #writes(file02,"commonFactorsScoring facs = "); every k := 1 to *facs do {writes(file02,facs[k]," ")}; write(file02," ")
      every k := 1 to *facs do { 
        if (facs[k] > 6) then { 
          sectionFactors[facs[k]] +:= 1 
          #write("1) sectionFactors[",facs[k],"] = ",sectionFactors[facs[k]])
        }
      }
      if ((i = 1) & (j = 2)) then j +:= 1 # Force Vowel Numeric factors to be ignored. They are redundant.
      j +:= 1
    }
    i +:= 1
  }
# Count Word factors. # <<<<<<<<<<<<<<<
  #write(file02,"commonFactorsScoring allTotals[",4,"][",1,"] = ",allTotals[4][1])
      facs := factors(allTotals[4][1]) # For Words: factor only count value!
      every k := 1 to *facs do { 
        if (facs[k] > 6) then { 
          sectionFactors[facs[k]] +:= 1 
          #write("2) sectionFactors[",facs[k],"] = ",sectionFactors[facs[k]])
        }
      }
# Count Additional Word and Form factors. 
# (i.e. odd/even words/forms, words/forms starting/ending with vowel/consonant.)
  i := 5 # Start with the Form totals.
  while (i <= 17) do { # i is an index on Form Totals through eForm Totals.
    j := 1
    while (j <=3) do { # j is an index on Count, Place, and Numeric values.
      #write(file02,"commonFactorsScoring allTotals[",i,"][",j,"] = ",allTotals[i][j])
      facs := factors(allTotals[i][j]) 
      #writes(file02,"commonFactorsScoring facs = "); every k := 1 to *facs do {writes(file02,facs[k]," ")}; write(file02," ")
      every k := 1 to *facs do { 
        if (facs[k] > 6) then { 
          sectionFactors[facs[k]] +:= 1 
          #write("3) sectionFactors[",facs[k],"] = ",sectionFactors[facs[k]])
        }
      }
      j +:= 1
    }
    i +:= 1
  }
  score := 0 ; dominantFactor := 0
  #write(file02,"Calculating the score: ")
  every k := key(sectionFactors) do { 
    # k is a factor, and sectionFactors[k] contains the score for that factor.
    #write(file02,"sectionFactors[",k,"] = ",sectionFactors[k]," score = ",score)
    if (sectionFactors[k] > score) then {
      score := sectionFactors[k] 
      dominantFactor := k
      #write(file02,"New score = ",score)
    }
  }

  dominantFactorsList := [] # Contains all the section factors with the winning score.
  every k := key(sectionFactors) do {
    if sectionFactors[k] = score then {
      put(dominantFactorsList,k) # Add factor to the list of winning factors for this section.
    }
  }
  write("commonFactorsScoring score = ",score," dominantFactors = ",
        dominantFactorsList[1]," ",(dominantFactorsList[2] | " "))
  return [[score, dominantFactorsList]]
end

procedure selectWinner()
  score := 0
  section := 0
  write(file02," ")
  every k := 1 to *sectionScores do { 
    kOut := ("0" || k)[-2:0]
    write(sectionNames[k]," sectionScores[",kOut,"][1] = ",sectionScores[k][1],
          " sectionScores[",kOut,"][2] = ",listFactors(sectionScores[k][2]))
    if sectionScores[k][1] > 1 then {
      write(file02,sectionNames[k],": The score for this section is ",
                   sectionScores[k][1],". Dominant factor(s): ",
                   listFactors(sectionScores[k][2]))
    }
    else {
      write(file02,sectionNames[k],": The score for this section is ",sectionScores[k][1],". There was no dominant factor.")
    }
    if (sectionScores[k][1] > score) then {
      score := sectionScores[k][1]
      section := k 
    }
  }
  if score > 1 then {
    numberOfWinners := 0
    every k := 1 to *sectionScores do { # Look for ties.
      if (sectionScores[k][1] = score) then numberOfWinners +:= 1 
    }
    if (numberOfWinners < 2) then { 
      write(file02,"The selected section is in ",sectionNames[k],".") 
    }
    else {
      write(file02,"There was a tie. ","The tied sections are: ")
      every k := 1 to *sectionScores do { 
        if (sectionScores[k][1] = score) then write(file02,sectionNames[k]) 
      }
    }
  }
  else {
    write(file02,"There was no winner!")
  }
end

procedure listFactors(factorsList)
  factorsString := ""
  factorsList := sort(factorsList)
  every i := 1 to *factorsList do {
    if i = 1 then factorsString := factorsList[i]
             else factorsString ||:= ", " || factorsList[i]
  }
return factorsString
end
