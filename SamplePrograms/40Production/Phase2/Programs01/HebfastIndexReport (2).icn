# This program reads the HebFast Index and writes a translated version to a file.

  procedure main()

  bookName := table("")
  bookName["01"] := "Gen"
  bookName["02"] := "Exo"
  bookName["03"] := "Lev"
  bookName["04"] := "Num"
  bookName["05"] := "Deu"
  bookName["06"] := "Jos"
  bookName["07"] := "Jud"
  bookName["08"] := "1Sa"
  bookName["09"] := "2Sa"
  bookName["10"] := "1Ki"
  bookName["11"] := "2Ki"
  bookName["12"] := "Isa"
  bookName["13"] := "Jer"
  bookName["14"] := "Eze"
  bookName["15"] := "Hos"
  bookName["16"] := "Joe"
  bookName["17"] := "Amo"
  bookName["18"] := "Oba"
  bookName["19"] := "Jon"
  bookName["20"] := "Mic"
  bookName["21"] := "Nah"
  bookName["22"] := "Hab"
  bookName["23"] := "Zep"
  bookName["24"] := "Hag"
  bookName["25"] := "Zec"
  bookName["26"] := "Mal"
  bookName["27"] := "Psa"
  bookName["28"] := "Pro"
  bookName["29"] := "Job"
  bookName["30"] := "Son"
  bookName["31"] := "Rut"
  bookName["32"] := "Lam"
  bookName["33"] := "Ecc"
  bookName["34"] := "Est"
  bookName["35"] := "Dan"
  bookName["36"] := "Ezr"
  bookName["37"] := "Neh"
  bookName["38"] := "1Ch"
  bookName["39"] := "2Ch"

  file01 := open("Hebfast.ind","ru") | 
            stop("Can't open Hebfast.ind.")
  file02 := open("HebFastIndReport.txt","w") | 
            stop("Can't open HebFastIndReport.txt.")
  file03 := open("Hebfast_StandardEncoding.txt","ru") | 
            stop("Can't open Hebfast_StandardEncoding.txt.")
  file04 := open("HebfastStandardEncoding_Lines.txt","w") |
            stop("Can't open HebfastStandardEncoding_Lines.txt.")

  bookNames := table("")

  newVerseLoc := 1; gTotalVerses := 0; bookTotalVerses := 0; oldBookNum := 1
  repeat {
    c9 := ""
    c1 := reads(file01)
    c2 := reads(file01)
    c3 := reads(file01)
    c4 := reads(file01)
    c5 := reads(file01)
    c6 := reads(file01)
    c7 := reads(file01)
    c8 := reads(file01)
    c9 := reads(file01)
    if *c9 < 1 then break
    #write(ord(c1)," ",ord(c2)," ",ord(c3)," ",ord(c4)," ",ord(c5)," ",ord(c6),
    #              " ",ord(c7)," ",ord(c8)," ",ord(c9))
    bookNum  := ("0" || (ord(c1) + 1))[-2:0]
    if bookNum ~= oldBookNum then bookTotalVerses := 0
    bookNam := bookName[bookNum]
    chapNum  := ord(c2) + 1
    verseNum := ord(c3) + 1
    n4 := ord(c4)         # Low order byte
    n5 := ord(c5) * 256   # Middle byte
    n6 := ord(c6) * 65536 # High order byte
    verseLoc := n4 + n5 + n6 + 1 # Verse location
    if verseLoc ~== newVerseLoc then stop("verseLoc error!",verseLoc," ",newVerseLoc)
    n8 := ord(c8) # Low order byte
    n9 := ord(c9) * 256 # High order byte
    verseLen := n8 + n9 # Verse length
    newVerseLoc := verseLoc + verseLen
    write(file02,bookNam," ",("000" || chapNum)[-3:0],":",("000" || verseNum)[-3:0],
                         " ",formatVerseLoc(verseLoc)," ",formatVerseLen(verseLen))
    gTotalVerses +:= 1; bookTotalVerses +:= 1
    gTotalVersesOut := ("0000" || gTotalVerses)[-5:0]
    bookTotalVersesOut := ("0000" || bookTotalVerses)[-5:0]
    writes(file04,gTotalVersesOut," ",bookTotalVersesOut," ",bookNam," ",("000" || chapNum)[-3:0],":",
                              ("000" || verseNum)[-3:0]," ")
    every i := 1 to verseLen do {
      charIn := reads(file03)
      writes(file04,charIn)
    }
    write(file04) # Carriage return/Linefeed
  }
end

procedure formatVerseLoc(verseLoc)
  verseLocOut := "000000" || verseLoc
  verseLocOut := verseLocOut[-7:0]
  return verseLocOut
end

procedure formatVerseLen(verseLen)
  verseLenOut := "000" || verseLen
  verseLenOut := verseLenOut[-4:0]
  return verseLenOut
end
