# This program uses Alpahbets.txt (a conversion table) to convert a Strong's Hebrew Lexicon
# to a common transliteration so it can be easily read. The Hebrew coding of the input file must be
# "Hebrew (Windows-1255) Encoded Text." You can create such a file easily with the Libre Office 
# "Save As" option.
# Note: When creating a conversion table, "Don't forget the five Hebrew final forms!" Also, any
#       unwanted characters (like vowells or punctuation) can simply be omitted from the table.
global alphaCset, alphabet, file02
procedure main()
# Initializations
  file00 := open("Alphabets.txt","r")   | stop("Cannot open Alphabets.txt\n")
  file01 := open("WorkingOut01.txt","r") | stop("Unable to open WorkingOut01.txt.")
  file02 := open("WorkingOut02.txt","w") | stop("Unable to open WorkingOut02.txt.")

# Create the empty Alphabet Table
  alphabet := table("")

# Load the Alphabet Table.  <<<<<<<<<<<< Missing the vowells!!!
  while line := read(file00) do
    { line ? {c1 := move(1)
                   move(1)
                   c2 := move(1) }
       alphabet[c1] := c2
    }

# Write the content of the alphabet table to the console.
  every a := key(alphabet) do
    write(file02,a,":",alphabet[a])

# Create a cset containing the letters in alphabet.
  alphaString := ""
  every a := key(alphabet) do
    alphaString ||:= a
  alphaCset := cset(alphaString)


# Convert file01 in it's own code set (Windows-1255) to file02 in the common code set.
  while lineIn := read(file01) do {
    strongsNumber := lineIn[1:10]
    lineIn := lineIn[10:0]
    lineIn := translit(lineIn)
    write(file02,strongsNumber,lineIn)
  }
end

procedure translit(lineIn)
  lineOut := ""
  while *lineIn > 0 do { 
    partA := partB := partC := partD := ""
    lineIn ? {
      partA := tab(upto(alphaCset))
      if (partB := tab(many(alphaCset))) then {
        partC := translitHebrew(partB)
        partD := tab(0)
        lineOut := partA || partC || " " || partB
        lineIn := partD
      }
      else {
        lineOut ||:= lineIn
        return lineOut 
      }
    }
  }
end

procedure translitHebrew(hebrewText)
  transedHebrew := ""
  #write(file02,"hebrewText ==>",hebrewText,"<") #Diagnostic
  hebrewText ? {
    while (nextChar := move(1)) do {
      transedChar := alphabet[nextChar]
      transedHebrew ||:= transedChar
      #write(file02,"nextChar ==>",nextChar,"< transedChar ==>",transedChar,"< transedHebrew ==>",transedHebrew,"<")
    }
  }
return transedHebrew
end
