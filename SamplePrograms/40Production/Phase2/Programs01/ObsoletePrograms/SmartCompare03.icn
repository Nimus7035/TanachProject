procedure main()

###############################################################################

# Initializations
  write("Begin File Compare\n")
  (file01 := open("HebfastPlus1998.Txt","u")) | stop("Cannot open HebfastPlus1998.Txt\n")
  (file02 := open("Tanach2012.Txt","u")) | stop("Cannot open Tanach2012.Txt\n")
  (file03 := open("SmartCompareReport_KorenHebFast1998_JPS1917Tanach2012.txt","w")) | stop("Cannot open SmartCompareReport.txt for writing.\n")
  write(file03,"Compare Koren HebfastPlus1998 To JPS1917 Tanach2012")
  write(file03," ")
  c1size := where(seek(file01,-1)); c2size := where(seek(file02,-1))
  write("Computed: c1size = ",c1size," c2size = ",c2size)
  c1size +:= 1; c2size +:=1
  write("Computed: c1size = ",c1size," c2size = ",c2size)
  #read()
  seek(file01,1); seek(file02,1)
  c1 := reads(file01,1); c2 := reads(file02,1)
  c1num := 1; c2num := 1
  c1savnum := 1; c2savnum := 1
  resolved := 0
  done := 0
  startingchar1 := 1
  startingchar2 := 1
  write(startingchar1); write(startingchar2)
  #read()

# Set the starting point.
  while c1num < startingchar1 do
    {reads(file01,1) 
     c1num := c1num + 1
    }
  while c2num < startingchar2 do
    {reads(file02,1) 
     c2num := c2num + 1
    }
  write(c1num); write(c2num)
  #read()

#################################################################################

# Main Loop
  while done = 0 do 
  {
#   Find next different letter.
    while c1 == c2 & done = 0 do
      {write(c1," ",c2," ",c1num," ",c2num)
       c1 := reads(file01,1)
       c2 := reads(file02,1)
       c1num := c1num + 1
       c2num := c2num + 1
       if (c1num >= c1size) then {write("Position 1 c1num = ",
           c1num," Program ending. Press Enter."); read(); done := 1; break} # Check EOF
       if (c2num >= c2size) then {write("Position 2 c2num = ",
           c2num," Program ending. Press Enter."); read(); done := 1; break} # Check EOF
      }
    if done = 1 then exit()
    write(c1," ",c2," ",c1num," ",c2num,"<-------")
    c1chars := table(" ") # Context table
    c2chars := table(" ") # Context table
    c1chars[c1num] := c1  # Save mismatched chars.
    c2chars[c2num] := c2  # Save mismatched chars.
    c1savnum := c1num # Save current position in file.
    c2savnum := c2num # Save current position in file.
    c1num := c1num + 1
    c2num := c2num + 1
    resolved := 0     # The discrepancy is not yet resolved.
#   Write more letters for context.
    while c1num < c1savnum + 11 & c1num < c1size -1 & c2num < c2savnum + 11 & c2num < c2size -1 do
      { write(c1 := reads(file01,1)," ",c2 := reads(file02,1)," ",c1num," ",c2num," Context")
        c1chars[c1num] := c1; c2chars[c2num] := c2
        c1num := c1num + 1; c2num := c2num + 1
      }
    #write(file03,"c1chars size = ",*c1chars," c2chars size = ",*c2chars)

#   Begin discrepancy resolution.
    write("Begin discrepancy resolution.")
    syncUpList := syncUp(c1chars, c2chars, c1savnum, c2savnum)
    write("syncUpList[1] ",syncUpList[1]," syncUpList[2] ",syncUpList[2]," syncUpList[3] ",syncUpList[3],
          " syncUpList[4] ",syncUpList[4])
    #read()

#   Case 1: File 2 is missing one or more characters.
    if syncUpList[1] = 1 then {
      write("Fee 1!")
      write("c1chars[c1savnum + 1] == ",c1savnum + 1," == ",c1chars[c1savnum + 1])
      write("c2chars[c2savnum] == ",c2savnum," == ",c2chars[c2savnum])
      write("Fie 1!")
        write("Foe 1!")
#       Write the discrepancy and context to the report.
        write(file03, "----------------------------------")
        write(file03, "File 2 is missing a character.")
        i := 0
        contextMax := *c1chars
        while i < contextMax do
        { c1num := c1savnum + i
          c2num := c2savnum + i
          if i = 0 then endtext := "<-------" else endtext := " Context"
          write(file03, c1chars[c1num]," ",c2chars[c2num]," ",c1num," ",c2num,endtext)
          i +:= 1
        }
        write(file03," ")
        write("Fum 1!")
        #write("Before seek: file01 ",where(file01)," file02 ",where(file02))
        c1num := c1savnum + 1
        c2num := c2savnum
        #write("c1num  ",c1num," c2num  ",c2num)
        seek(file01,c1num)
        seek(file02,c2num)
        #write("After seek: file01 ",where(file01)," file02 ",where(file02))
        c1 := reads(file01,1)
        c2 := reads(file02,1)
        #write("After 1 read:  file01 ",where(file01)," file02 ",where(file02)," done ",done)
        #write("1. c1 ",c1," c2 ",c2)
        #read()
    } # End Case 1
      

#   Case 2: File 2 contains one or more extra characters.
    if syncUpList[1] = 2 then {
      write("Fee 2!")
      write("c1chars[c1savnum] == ", c1chars[c1savnum])
      write("c2chars[c2savnum + 1] == ", c2chars[c2savnum + 1])
      write("Fie 2!")
        write("Foe 2!")
#       Write the discrepancy and context to the report.
        write(file03, "----------------------------------")
        write(file03, "File 2 has an extra character.")
        i := 0
        while i < 11 do
        { c1num := c1savnum + i
          c2num := c2savnum + i
          if i = 0 then endtext := "<-------" else endtext := " Context"
          write(file03, c1chars[c1num]," ",c2chars[c2num]," ",c1num," ",c2num,endtext)
          i +:= 1
        }
        write(file03," ")
        write("Fum 2!")
        c1num := c1savnum
        c2num := c2savnum + 1
        seek(file01,c1num)
        seek(file02,c2num)
        c1 := reads(file01,1)
        c2 := reads(file02,1)
    } # End Case 2

#   Case 3: File 2 contains two or more characters that are wrong or in the wrong order.
    if syncUpList[1] = 3 then {
      write("Fee 3!")
      write("c1chars[c1savnum] == ", c1chars[c1savnum])
      write("c2chars[c2savnum] == ", c2chars[c2savnum])
      write("Fie 3!")
        write("Foe 3!")
#       Write the discrepancy and context to the report.
        write(file03, "----------------------------------")
        write(file03, "File 2 has wrong characters.")
        arrowCount := syncUpList[4]
        #write("arrowCount ",arrowCount)
        #read()
        i := 0
        while i < 11 do
        { c1num := c1savnum + i
          c2num := c2savnum + i
          if i < arrowCount then endtext := "<-------" else endtext := " Context"
          write(file03, c1chars[c1num]," ",c2chars[c2num]," ",c1num," ",c2num,endtext)
          i +:= 1
        }
        write(file03," ")
        write("Fum 3!")
        c1num := c1savnum + syncUpList[4]
        c2num := c2savnum + syncUpList[4]
        write("c1num ",c1num," c2num ",c2num," syncUpList[4] ",syncUpList[4])
        #read()
        seek(file01,c1num)
        seek(file02,c2num)
        c1 := reads(file01,1)
        c2 := reads(file02,1)
    } # End Case 3

   } 

# End Main Loop

#######################################################################################

end

procedure syncUp(c1chars, c2chars, c1savnum, c2savnum)
  write("Entering syncUP.........................")
  missingScore :=0; extraScore := 0; wrongScore := 0; mostLikelyCaseNum := 0
  c1charsSize := *c1chars; c2charsSize := *c2chars
  #write("c1charsSize ",c1charsSize," c2charsSize ",c2charsSize)
  #write("c1savnum ",c1savnum," c2savnum ",c2savnum)
  c1charsMax := c1charsSize + c1savnum - 1
  c2charsMax := c2charsSize + c2savnum - 1
  #write("c1charsMax ",c1charsMax," c2charsMax ",c2charsMax)
  #read()

# Case 1: Character missing from file02
  i := c1savnum + 1; j := c2savnum
  #write("Case1: i ",i," j ",j)
  #read()
  while i < c1charsMax do
    {#write("c1chars[i] ",c1chars[i]," c2chars[j] ",c2chars[j])
     if c1chars[i] == c2chars[j] then missingScore +:= 1 else break
     i +:= 1; j +:= 1
     #write("i ",i," j ",j," missingScore ",missingScore)
     #read()
    }
  if missingScore > 0 then mostLikelyCaseNum := 1

# Case 2: Extra character in file 02
  i := c1savnum; j := c2savnum + 1
  #write("Case2: i ",i," j ",j)
  #read()
  while j < c2charsMax do
    {if c1chars[i] == c2chars[j] then extraScore +:= 1 else break
     i +:= 1; j +:= 1
     #write("i ",i," j ",j," extraScore ",extraScore)
     #read()
    }
  if extraScore > missingScore then mostLikelyCaseNum := 2

# Case 3: One or more wrong characters   
  i := c1savnum; j := c2savnum; wrongChars1 := ""; wrongChars2 := ""
  #write("Case3: i ",i," j ",j)
  #read()
  if (missingScore < 2) & (extraScore < 2) then
  {
    while i < c1charsMax do
      {if c1chars[i] ~== c2chars[j] then  
        {wrongScore +:= 1 
         #wrongChars1 := wrongChars1 ++ c1chars[i]
         #wrongChars2 := wrongChars2 ++ c2chars[j]
        }
        else break
      i +:= 1; j +:= 1
      }
  }

  if (wrongScore > missingScore) & (wrongScore > extraScore) then mostLikelyCaseNum := 3
  returnScores := [mostLikelyCaseNum, missingScore, extraScore, wrongScore]
  write("returnScores = ",returnScores[1]," ",returnScores[2]," ",returnScores[3]," ",returnScores[4])
  #read()
return returnScores
end
