# This program reads a verse and computes some Panin scores.
link factors
global file02, cVowels, cConsonants, nVal, pVal

procedure main()

  cVowels := 'AHVY'; cConsonants := 'BGDZX+KLMN$@PCQRST'

  nVal := table(0) # Numeric Values
  nVal["A"] := 1   # Aleph
  nVal["B"] := 2   # Beth
  nVal["G"] := 3   # Gimel
  nVal["D"] := 4   # Daleth
  nVal["H"] := 5   # He
  nVal["V"] := 6   # Vav
  nVal["Z"] := 7   # Zayin
  nVal["X"] := 8   # Heth
  nVal["+"] := 9   # Teth
  nVal["Y"] := 10  # Yod
  nVal["K"] := 20  # Kaph
  nVal["L"] := 30  # Lamed
  nVal["M"] := 40  # Mem
  nVal["N"] := 50  # Nun
  nVal["$"] := 60  # Samek
  nVal["@"] := 70  # Ayin
  nVal["P"] := 80  # Pe
  nVal["C"] := 90  # Tsade
  nVal["Q"] := 100 # Qoph
  nVal["R"] := 200 # Resh
  nVal["S"] := 300 # Sin/Shin
  nVal["T"] := 400 # Taw

  pVal := table(0) # Place Values
  pVal["A"] := 1   # Aleph
  pVal["B"] := 2   # Beth
  pVal["G"] := 3   # Gimel
  pVal["D"] := 4   # Daleth
  pVal["H"] := 5   # He
  pVal["V"] := 6   # Vav
  pVal["Z"] := 7   # Zayin
  pVal["X"] := 8   # Heth
  pVal["+"] := 9   # Teth
  pVal["Y"] := 10  # Yod
  pVal["K"] := 11  # Kaph
  pVal["L"] := 12  # Lamed
  pVal["M"] := 13  # Mem
  pVal["N"] := 14  # Nun
  pVal["$"] := 15  # Samek
  pVal["@"] := 16  # Ayin
  pVal["P"] := 17  # Pe
  pVal["C"] := 18  # Tsade
  pVal["Q"] := 19  # Qoph
  pVal["R"] := 20  # Resh
  pVal["S"] := 21  # Sin/Shin
  pVal["T"] := 22  # Taw

  file01 := open("PaninInput.txt","r") | stop("Stop: Cannot open PaninInput.txt.")
  file02 := open("PaninScoresOut.txt","w") | stop("Stop: Cannot open PaninScoresOut.txt")
  while (lineIn := trim(read(file01))) do {
    lineIn ||:= " "
    if (lineIn[1:4] == ">>>") then {verseIn := lineIn[4:0]; processVerse(verseIn)}
                              else write(file02,lineIn)
  }
end

procedure processVerse(verseIn)
  write(file02,"\n",verseIn)
  processVowels(verseIn)
  processConsonants(verseIn)
  processWords(verseIn)
end

procedure processVowels(verseIn)
  totalCount := totalPlace := totalNum := vowelCount := 0 
  every (verseIn ? {upto(cVowels) & move(1)}) do vowelCount +:= 1
  write(file02,"\nvowelCount == ",vowelCount,"   ",formatFactors(vowelCount))
  write(file02,"             ","Count","  Place"," Numeric","                    Count",
    "                    Place","                  Numeric")
  vOut := valuesOut("Aleph","A",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("He","H",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Vav","V",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Yod","Y",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  write(file02,left(" ",14),right("---",4),right("------",7),
        right("-------",8),right("-----------------------",25),
        right("-----------------------",25),right("-----------------------",25))
  write(file02,left("Vow Totals",14),right(totalCount,4),right(totalPlace,7),
        right(totalNum,8),right(formatFactors(totalCount),25),
        right(formatFactors(totalPlace),25),right(formatFactors(totalNum),25))
  return vowelCount
end

procedure processConsonants(verseIn)
  totalCount := totalPlace := totalNum := consonantCount := 0 
  every (verseIn ? {upto(cConsonants) & move(1)}) do consonantCount +:= 1
  write(file02,"\nconsonantCount == ",consonantCount,"   ",formatFactors(consonantCount))
  write(file02,"             ","Count","  Place"," Numeric","                    Count",
    "                    Place","                  Numeric")
  vOut := valuesOut("Beth","B",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Gimel","G",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Daleth","D",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Zayin","Z",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Heth","X",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Teth","+",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Kaph","K",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Lamed","L",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Mem","M",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Nun","N",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Samek","$",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Ayin","@",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Pe","P",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Tsade","C",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Qoph","Q",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Resh","R",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Sin/Shin","S",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  vOut := valuesOut("Taw","T",verseIn)
  totalCount +:= vOut[1]; totalPlace +:= vOut[2]; totalNum +:= vOut[3]
  write(file02,left(" ",14),right("---",4),right("------",7),
        right("-------",8),right("-----------------------",25),
        right("-----------------------",25),right("-----------------------",25))
  write(file02,left("Con Totals",14),right(totalCount,4),right(totalPlace,7),
        right(totalNum,8),right(formatFactors(totalCount),25),
        right(formatFactors(totalPlace),25),right(formatFactors(totalNum),25))
  return consonantCount
end

procedure processWords(verseIn)
  wordCount := 0; words := table(0); w := ""; i := 0
  while (*verseIn > 1) do {
    verseIn ? { (w := tab(upto(' ')))
    i +:= 1
    words[w] +:= 1
    wordCount +:= 1 
    verseIn := verseIn[&pos + 1:0]
    } 
  }
  write(file02,"\nwordCount == ",wordCount,"   ",formatFactors(wordCount))
  write(file02,"             ","Count","  Place"," Numeric","                    Count",
    "                    Place","                  Numeric")
  sWords := sort(words,1)
  wordValuesOut(sWords)
  return wordCount
end

procedure wordValuesOut(sWords)
  wordPlace := totalWordPlace := wordNum := totalWordNum := totalWordCount := 0  # Initializations
  totalCharCount := totalCharPlace := totalCharNum := 0
  every i := 1 to *sWords do { # Process each word
    word := sWords[i][1]
    wordCount := sWords[i][2]
    totalWordCount +:= sWords[i][2]
    wordPlace := wordNum := 0
    word ? {while (letter := move(1)) do {
      wordPlace +:= pVal[letter] * wordCount
      totalWordPlace +:= pVal[letter]
      wordNum +:= nVal[letter] * wordCount
      totalWordNum +:= nVal[letter]
      totalCharCount +:= 1; totalCharPlace +:= pVal[letter] * wordCount; totalCharNum +:= nVal[letter] * wordCount
      }
    }
  countFacsOut := formatFactors(wordCount)
  placeFacsOut := formatFactors(wordPlace)
  numFacsOut   := formatFactors(wordNum)
  totalCountFacsOut := formatFactors(totalWordCount)
  totalPlaceFacsOut := formatFactors(totalWordPlace)
  totalNumFacsOut := formatFactors(totalWordNum)
    write(file02,left(word,14),right(wordCount,4),right(wordPlace,7),
          right(wordNum,8),right(countFacsOut,25),
          right(placeFacsOut,25),right(numFacsOut,25))
  }
    write(file02,left(" ",14),right("---",4),right("------",7),
          right("-------",8),right("-----------------------",25),
          right("-----------------------",25),right("-----------------------",25))
    write(file02,left("Word Totals",14),right(totalWordCount,4),right(totalWordPlace,7),
          right(totalWordNum,8),right(totalCountFacsOut,25),
          right(totalPlaceFacsOut,25),right(totalNumFacsOut,25))
    write(file02,left("Char Totals",14),right(totalCharCount,4),right(totalCharPlace,7),
          right(totalCharNum,8),right(formatFactors(totalCharCount),25),
          right(formatFactors(totalCharCount),25),right(formatFactors(totalCharCount),25))
  return
end

procedure valuesOut(charName,char,verseIn)
  charCount := 0
  every (verseIn ? {upto(char) & move(1)}) do charCount +:= 1
  charPlace := charCount * pVal[char]
  charNum   := charCount * nVal[char]
  charCountFacsOut := formatFactors(charCount)
  charPlaceFacsOut := formatFactors(charPlace)
  charNumFacsOut   := formatFactors(charNum)
  write(file02,left(charName,14),right(charCount,4),right(charPlace,7),
                                 right(charNum,8),right(charCountFacsOut,25),
                                 right(charPlaceFacsOut,25),right(charNumFacsOut,25))
  return [charCount,charPlace,charNum]
end

procedure formatFactors(count)
  facs := factors(count)
  facsOut := ""
  every i := 1 to *facs do {if i > 1 then spx := "x" else spx := ""
                                   facsOut ||:= spx || facs[i]}
  if *facsOut < 1 then facsOut := count
return facsOut
end
