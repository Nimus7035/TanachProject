# This program reads a series of UTF-8 encoded Tanach files and transliterates them 
# for later processing.

global translit, startNote, endNote, fileName

procedure main()

  # Constants
  r2l := "\xE2\x80\xAB"; l2r := "\xE2\x80\xAA" # Direction of text
  endPara := "\x20\xD7\xA4\xE2\x80\xAC"; endVerse := "\x20\xE2\x80\xAC"
  endSec := "\x20\xD7\xA1\xE2\x80\xAC"
  endParaNoSpace := "\xD7\xA4\xE2\x80\xAC"; endVerseNoSpace := "\xE2\x80\xAC"
  endSecNoSpace := "\xD7\xA1\xE2\x80\xAC"
  startNote := "\xE2\x80\xAA\x5B"; endNote := "\x5D\xE2\x80\xAC"
  nunHafukha := "\xD7\x86" # Backwards Nun (used like brackets)

# Translation Table
  translit := table("")
  translit["\xC2\xA0"] := ""  # Non Break Space
  translit["\xD7\x83"] := ":" # Sof Pasuq (colon)
  translit["\xD7\x86"] := ""  # Nun Hafukha (Backwards Nun)
  translit["\xD7\x90"] := "A" # Aleph
  translit["\xD7\x91"] := "B" # Beth
  translit["\xD7\x92"] := "G" # Gimel
  translit["\xD7\x93"] := "D" # Daleth
  translit["\xD7\x94"] := "H" # He
  translit["\xD7\x95"] := "V" # Vav or Waw
  translit["\xD7\x96"] := "Z" # Zayin
  translit["\xD7\x97"] := "X" # Heth / Cheth
  translit["\xD7\x98"] := "+" # Teth
  translit["\xD7\x99"] := "Y" # Yod
  translit["\xD7\x9A"] := "K" # Kaph Sofit (Final Kapf)
  translit["\xD7\x9B"] := "K" # Kaph
  translit["\xD7\x9C"] := "L" # Lamed
  translit["\xD7\x9D"] := "M" # Mem Sofit (Final Mem)
  translit["\xD7\x9E"] := "M" # Mem
  translit["\xD7\x9F"] := "N" # Nun Sofit (Final Nun)
  translit["\xD7\xA0"] := "N" # Nun
  translit["\xD7\xA1"] := "$" # Samek
  translit["\xD7\xA2"] := "@" # Ayin
  translit["\xD7\xA3"] := "P" # Pe Sofit (Final Pe)
  translit["\xD7\xA4"] := "P" # Pe
  translit["\xD7\xA5"] := "C" # Tsade Sofit (Final Tsade)
  translit["\xD7\xA6"] := "C" # Tsade
  translit["\xD7\xA7"] := "Q" # Qoph
  translit["\xD7\xA8"] := "R" # Resh
  translit["\xD7\xA9"] := "S" # Sin / Shin
  translit["\xD7\xAA"] := "T" # Taw
  
  file00 := open("FileNames.txt",r) | stop("Cannot open FileNames.txt.")
  gTotalVerseCount := 0
  gTotalChapterCount := 0
  file03 := open("WLC_Statistics.txt","w") | stop("Cannot open WLC_Statistics.txt.")
  write(file03,"Westminster Leningrad Codex","\n")
  while (fileNames := read(file00)) do {
    fileNameOut := fileNames[1:11]
    fileNameIn := fileNames[12:0] 
    file01 := open(fileNameIn,"r") | stop("Cannot open ",fileNameIn)
    file02 := open(fileNameOut,"w") | stop("Cannot open ",fileNameOut)
    book := fileNames[4:7]
    verseCount := 0
    chapCount := 0
    hebrewEncountered := 0; 
    write("File ",fileNameIn," is open."," book == ",book)
    #read()
    while (lineIn := read(file01)) do {
      #write("MainLoop lineIn>",lineIn,"<") # Diagnostic
      lineIn ? { if (tab(find(nunHafukha))) then { # Remove Nun Hafukha
                   #write("nunHafukha found in at ",&pos,">",lineIn) # Diagnostic
                   lineIn := lineIn[1:&pos] || "\xC2\xA0" || lineIn[&pos+2:0]
                   #write("nunHafukha removed from ",lineIn) # Diagnostic
                   #read() # Diagnostic
                 }
      }
      if (lineIn[1:4] == r2l) then {
        lineIn := lineIn[4:0]
        while (lineIn := stripNote(lineIn)) do {} # Repeat stripNote until it fails.
        if (lineIn[-6:0] == endPara)  then lineIn := lineIn[1:-6]
        if (lineIn[-6:0] == endSec)   then lineIn := lineIn[1:-6]
        if (lineIn[-4:0] == endVerse) then lineIn := lineIn[1:-4]
        if (lineIn[-5:0] == endParaNoSpace)  then lineIn := lineIn[1:-5]
        if (lineIn[-5:0] == endSecNoSpace)   then lineIn := lineIn[1:-5]
        if (lineIn[-3:0] == endVerseNoSpace) then lineIn := lineIn[1:-3]
        #write("Before transliterate>",lineIn,"<") # Diagnostic
        lineIn := transliterate(lineIn)
        #write("After transliterate>",lineIn,"<") # Diagnostic
        verseCount +:= 1
        gTotalVerseCount +:= 1
        lineIn ? { if ( (verse := tab(find(':'))) & (colon := move(1)) & 
                      (chap := tab(many(&digits))) ) then 
                      lineIn:= reformatLine(gTotalVerseCount,verseCount,book,chap,colon, 
                                            verse,lineIn[&pos:0])}
        
        write(file02,trim(lineIn)) 
        #write(trim(lineIn)) # Diagnostic
      }

    } # end inner while
    verseCount := "000" || verseCount; verseCount := verseCount[-4:0]
    chap  := "00" || chap; chap := chap[-3:0]
    if book == "Oba" then chp := " chapter." else chp := " chapters."
    write(file03,book," has ",verseCount," verses and ",chap,chp)
    gTotalChapterCount +:= chap
  } # end outer while
  write(file03,"The Tanach has ",gTotalVerseCount," verses and ",
                                 gTotalChapterCount," chapters.")
end

procedure reformatLine(gTotalVerseCount,verseCount,book,chap,colon,verse,lineIn)
  chap  := "00" || chap;  chap  :=  chap[-3:0] || colon
  verse := "00" || verse; verse := verse[-3:0] || " "
  verseCount := "0000" || verseCount; verseCount := verseCount[-5:0] || " "
  gTotalVerseCount := "0000" || gTotalVerseCount; gTotalVerseCount := gTotalVerseCount[-5:0] || " "
  return gTotalVerseCount || verseCount || book || " " || chap || verse || lineIn
end

procedure stripNote(lineIn)
  lineIn ? {if (pos1 := find(startNote) & pos2 := find(endNote)) then 
             {pos2 +:= 4; lineIn := lineIn[1:pos1] || lineIn[pos2:0]; return lineIn}
             else fail
           }
end

procedure transliterate(lineIn)
  transedLine := ""
  #write("Top of transliterate lineIn>",lineIn,"<") # Diagnostic
  while (*lineIn > 0) do {
    lineIn ? {
      if (tempStr := tab(upto('\xD7\xC2')) & (oldChar := move(2))) then {
        if (newChar := translit[oldChar]) then {
          transedLine ||:= tempStr || newChar
          lineIn := lineIn[&pos:0]
          #write("Middle of transliterate lineIn>",lineIn,"<") # Diagnostic
        } else write("Middle of transliterate: Something is wrong!")
      } else {write("transliterate says, Help! Help! I'm very confused!")
              write("lineIn >",lineIn,"<") 
              transedLine ||:= "************************" || lineIn
              write("transedLine >",transedLine,"<")
              lineIn := ""}
    }
  } 
if (*transedLine = 0) then transedLine ||:= lineIn
return transedLine
end
