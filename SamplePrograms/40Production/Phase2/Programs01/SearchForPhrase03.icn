# This program reads a section of scripture searching for a phrase that has a Numeric
# value or a Place value matching the first parameter on the command line. The second
# parameter on the command line is the searchRange. 

# Both parameters are used to name the input and output files. The searchRange does 
# not define the range of text to be searched by this program. Rather, the search is conducted 
# on the entire input file. The searchRange is only used to name the input and output files.

link factors
global file01, file02, cVowels, cConsonants, nVal, pVal

procedure main(args)

# Begin initializations.
  searchNumber := args[1] 
  if /searchNumber then stop("Usage: SearchForPhrase.exe  %searchNumber%  %searchRange%")
  searchRange := args[2] 
  if /searchRange then stop("Usage: SearchForPhrase.exe  %searchNumber%  %searchRange%")
  fileSuffix := ("0000" || searchNumber)[-4:0]
  inputFileName := "PaninSectionInput" || fileSuffix || searchRange || ".txt"
  outFileName := "PhrasesByNumberAndPlace_" || fileSuffix || searchRange || ".txt"   
  logFileName := "LogPhrasesByNumberAndPlace_" || fileSuffix || searchRange || ".txt"   
  wordFileName := "tempWords_" || fileSuffix || searchRange || ".txt"   
  write("The searchNumber is ",searchNumber)

  cVowels := 'AHVY'; cConsonants := 'BGDZX+KLMN$@PCQRST'
  beginUTF8File := "\xEF\xBB\xBF"

  nVal := table(0) # Numeric Values
  nVal[" "] := 0   # Space
  nVal["A"] := 1   # Aleph
  nVal["B"] := 2   # Beth
  nVal["G"] := 3   # Gimel
  nVal["D"] := 4   # Daleth
  nVal["H"] := 5   # He
  nVal["V"] := 6   # Vav
  nVal["Z"] := 7   # Zayin
  nVal["X"] := 8   # Heth
  nVal["+"] := 9   # Teth
  nVal["Y"] := 10  # Yod
  nVal["K"] := 20  # Kaph
  nVal["L"] := 30  # Lamed
  nVal["M"] := 40  # Mem
  nVal["N"] := 50  # Nun
  nVal["$"] := 60  # Samek
  nVal["@"] := 70  # Ayin
  nVal["P"] := 80  # Pe
  nVal["C"] := 90  # Tsade
  nVal["Q"] := 100 # Qoph
  nVal["R"] := 200 # Resh
  nVal["S"] := 300 # Sin/Shin
  nVal["T"] := 400 # Taw

  pVal := table(0) # Place Values
  nVal[" "] := 0   # Space
  pVal["A"] := 1   # Aleph
  pVal["B"] := 2   # Beth
  pVal["G"] := 3   # Gimel
  pVal["D"] := 4   # Daleth
  pVal["H"] := 5   # He
  pVal["V"] := 6   # Vav
  pVal["Z"] := 7   # Zayin
  pVal["X"] := 8   # Heth
  pVal["+"] := 9   # Teth
  pVal["Y"] := 10  # Yod
  pVal["K"] := 11  # Kaph
  pVal["L"] := 12  # Lamed
  pVal["M"] := 13  # Mem
  pVal["N"] := 14  # Nun
  pVal["$"] := 15  # Samek
  pVal["@"] := 16  # Ayin
  pVal["P"] := 17  # Pe
  pVal["C"] := 18  # Tsade
  pVal["Q"] := 19  # Qoph
  pVal["R"] := 20  # Resh
  pVal["S"] := 21  # Sin/Shin
  pVal["T"] := 22  # Taw

  file01 := open(inputFileName,"r") | 
            stop("Stop: Cannot open ",inputFileName,".")
  file02 := open(outFileName,"w") | 
            stop("Stop: Cannot open ",outFileName,".")
#  file03 := open(logFileName,"w") | # The logFile is used for debugging.
#            stop("Stop: Cannot open ",logFileName,".")
  file04 := open(wordFileName,"w") |
            stop("Stop: Cannot open ",wordFileName,".")

# Begin main program.
# Acquire all the words.
  wordCount := 0
  currentVerse := ""
  while lineIn := trim(read(file01)) do {
    if (lineIn[1:2] == "$") then currentVerse := lineIn[2:13]
    if (lineIn[1:4] == ">>>") then {
      lineIn := lineIn[4:0] || " "
      lineIn ? {
        while (&pos < *lineIn) do {
          word := tab(upto(' '))
          tab(many(' '))
          wordCount +:= 1
          wordCountOut := ("00000" || wordCount || " ")[-7:0]
          write(file04,wordCountOut,currentVerse," ",word)
        }        
      }
    }
  }
  write(file02,"The last word was: ",word," verse = ",currentVerse)
  write(file02,"The size of the words list is: ",wordCount)
  close(file01); close(file04)
  #stop("End test.")

# Evaluate all the words for numeric value.
  file04 := open(wordFileName,"r") |
            stop("Stop: Cannot open ",wordFileName,".")
  write(file02,"Searching for ",searchNumber,". Numeric matches:")
  tempString := ""; verseRef := ""; count := 0
  while wordsIn := read(file04) do {
    word := wordsIn[20:0]
    verseRef := wordsIn[8:19]
    tempString ||:= word || " "
    repeat {
      numVal := numericValue(tempString)
      if (numVal < searchNumber) then break # tempString is too short.
      if (numVal = searchNumber) then {     # tempString meets criteria.
        count +:= 1
        write(file02,tempString," found ending in ",verseRef)
      } 
      tempString ? { # Strip off the first word.
        tab(upto(' ')); tab(many(' '))
        tempString := tempString[&pos:0]
      }
    }
  }
  write(file02,"The total number of numeric matches is ",count,".\n")
  close(file04)

# Evaluate all the words for place value.
  file04 := open(wordFileName,"r") |
            stop("Stop: Cannot open ",wordFileName,".")
  write(file02,"Searching for ",searchNumber,". Place matches:")
  tempString := ""; verseRef := ""; count := 0
  while wordsIn := read(file04) do {
    word := wordsIn[20:0]
    verseRef := wordsIn[8:19]
    tempString ||:= word || " "
    repeat {
      placeVal := placeValue(tempString)
      if (placeVal < searchNumber) then break # tempString is too short.
      if (placeVal = searchNumber) then {     # tempString meets criteria.
        count +:= 1
        write(file02,tempString," found ending in ",verseRef)
      }
      tempString ? { # Strip off the first word.
        tab(upto(' ')); tab(many(' '))
        tempString := tempString[&pos:0]
      }
    }
  }
  write(file02,"The total number of place matches is ",count,".")
end

procedure numericValue(tempString)
  numVal := 0
  tempString ? {
    while (&pos < *tempString) do {
      char := move(1)
      numVal +:= nVal[char]
    }
  }
  return numVal
end

procedure placeValue(tempString)
  placeVal := 0
  tempString ? {
    while (&pos < *tempString) do {
      char := move(1)
      placeVal +:= pVal[char]
    }
  }
  return placeVal
end
