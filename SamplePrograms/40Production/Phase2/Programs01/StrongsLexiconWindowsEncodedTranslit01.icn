# This program uses Alpahbets.txt (a conversion table) to convert a Strong's Hebrew Lexicon
# to a common transliteration so it can be easily read. The Hebrew coding of the input file must be
# "Hebrew (Windows-1255) Encoded Text." You can create such a file easily with the Libre Office 
# "Save As" option.
# Note: When creating a conversion table, "Don't forget the five Hebrew final forms!" Also, any
#       unwanted characters (like vowells or punctuation) can simply be omitted from the table.
global alphabet, file03, file04
procedure main()
# Initializations
  write("Begin File Conversion\n")
  (file01 := open("Alphabets.txt","r")) | stop("Cannot open Alphabets.txt\n")
  (file02 := open("WorkingOut.txt","r")) | stop("Cannot open WorkingOut.txt\n")
  (file03 := open("WorkingOut2.txt","w")) | stop("Cannot open WorkingOut2.txt\n")
  (file04 := open("DoublesOut2.txt","w")) | stop("Cannot open DoublesOut2.txt\n")

  c1 := " "
  c2 := " "
  linein := " "

# Create the empty Alphabet Table
  alphabet := table("")

# Load the Alphabet Table.
  while line := read(file01) do
    { line ? {c1 := move(1)
                   move(1)
                   c2 := move(1) }
       alphabet[c1] := c2
    }
  alphabet[" "] := " "

# Write the content of the alphabet table to the console.
every a := key(alphabet) do
  write(a, ":", alphabet[a])

# Convert file02 in it's own code set to file03 in the common code set.
  while lineIn := read(file02) do {
    lineIn ? {
      if (strongsNumber := tab(upto(' '))) then {
        tab(many(' '))
        if (hebrewText := trim(tab(upto('[')))) then {
          definition := lineIn[&pos:0]
          transedHebrew := translitHebrew(strongsNumber,hebrewText)
          write(file03,strongsNumber," ",transedHebrew," ",definition)
          next
        }
      }
      else 
      { 
        write(file03,lineIn) # Nothing to convert.
        next
      }
    }
  }
end

procedure translitHebrew(strongsNumber,hebrewText)
  transedHebrew := ""
  #write(file03,"hebrewText ==",hebrewText) #Diagnostic
  hebrewText ? {
    while (nextChar := move(1)) do {
      transedChar := alphabet[nextChar]
      transedHebrew ||:= transedChar
      #write(file03,"nextChar ==",nextChar," transedChar ==",transedChar," transedHebrew ==",transedHebrew)
    }
  }
  hebrewText ? {
    if upto(',') then
      write(file04,strongsNumber," ",transedHebrew)
  }
return transedHebrew
end
