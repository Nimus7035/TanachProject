procedure main()
# Initializations
  write("Begin File Compare\n")
  (file01 := open("HebfastPlus1998.Txt","u")) | stop("Cannot open HebfastPlus1998.Txt\n")
  (file02 := open("Tanach2012.Txt","u")) | stop("Cannot open Tanach2012.Txt\n")
  (file03 := open("SmartCompare02Report.txt","w")) | stop("Cannot open SmartCompare02Report.txt for writing.\n")
  c1size := where(seek(file01,-1)); c2size := where(seek(file02,-1))
  write("Computed: c1size = ",c1size," c2size = ",c2size)
  seek(file01,1); seek(file02,1)
  c1 := reads(file01,1); c2 := reads(file02,1)
  c1num := 1; c2num := 1
  c1savnum := 1; c2savnum := 1
  resolved := 0
  done := 0
  startingchar1 := 1
  startingchar2 := 1
  write(startingchar1); write(startingchar2)
# read()

# Set the starting point.
  while c1num < startingchar1 do
    {reads(file01,1) 
     c1num := c1num + 1
    }
  while c2num < startingchar2 do
    {reads(file02,1) 
     c2num := c2num + 1
    }
  write(c1num); write(c2num)
# read()

  while done = 0 do # Main Loop
  {
#   Find next different letter.
    while c1 == c2 do
      {write(c1," ",c2," ",c1num," ",c2num)
       c1num := c1num + 1
       c2num := c2num + 1
       c1 := reads(file01,1)
       c2 := reads(file02,1)
      }
    write(c1," ",c2," ",c1num," ",c2num,"<-------")
    c1chars := table(" ") # Context table
    c2chars := table(" ") # Context table
    c1chars[c1num] := c1  # Save mismatched chars.
    c2chars[c2num] := c2  # Save mismatched chars.
    c1savnum := c1num # Save current position in file.
    c2savnum := c2num # Save current position in file.
    c1num := c1num + 1
    c2num := c2num + 1
    resolved := 0     # The discrepancy is not yet resolved.
#   Write more letters for context.
    while c1num < c1savnum + 11 & c1num < c1size -1 & c2num < c2savnum + 11 & c2num < c2size -1 do
      { write(c1 := reads(file01,1)," ",c2 := reads(file02,1)," ",c1num," ",c2num," Context")
        c1chars[c1num] := c1; c2chars[c2num] := c2
        c1num := c1num + 1; c2num := c2num + 1
      }
    write(file03,"c1chars size = ",*c1chars," c2chars size = ",*c2chars)
#   Write out the context table contents.
#     i := 0
#     while i < 11 do
#     { c1num := c1savnum + i
#       c2num := c2savnum + i
#       write(c1chars[c1num]," ",c2chars[c2num]," ",c1num," ",c2num)
#       i +:= 1
#     }
    write("Begin discrepancy resolution.")

#   Begin discrepancy resolution.
#      syncUp(c1chars, c2chars, c1savnum, c2savnum)

#   Case 1: File 2 is missing one or more characters.
    if resolved = 0 then {
      write("Fee 1!")
      write("c1chars[c1savnum + 1] == ", c1chars[c1savnum + 1])
      write("c2chars[c2savnum] == ", c2chars[c2savnum])
      write("Fie 1!")
      if c1chars[c1savnum + 1] == c2chars[c2savnum] & c1chars[c1savnum + 2] == c2chars[c2savnum + 1] & c1chars[c1savnum + 3] == c2chars[c2savnum + 2]  then {
        write("Foe 1!")
        write(file03, "-----------------------------------------------------------------------------------------")
        write(file03, "File 2 is missing one or more characters.")
#       Write the context.
        i := 0
        while i < 11 do
        { c1num := c1savnum + i
          c2num := c2savnum + i
          if i = 0 then endtext := "<-------" else endtext := " Context"
          write(file03, c1chars[c1num]," ",c2chars[c2num]," ",c1num," ",c2num,endtext)
          i +:= 1
        }
        write(file03," ")
        write("Fum 1!")
        c1num := c1savnum + 1
        c2num := c2savnum
        seek(file01,c1num)
        seek(file02,c2num)
        if not c1 := reads(file01,1) then done := 1
        if not c2 := reads(file02,1) then done := 1
        resolved := 1
        }
    }
      

#   Case 2: File 2 contains one or more extra characters.
    write("Case 2: resolved = ",resolved,"")
    #read()
    if resolved = 0 then {
      write("Fee 2!")
      write("c1chars[c1savnum] == ", c1chars[c1savnum])
      write("c2chars[c2savnum + 1] == ", c2chars[c2savnum + 1])
      write("Fie 2!")
#        syncmissing(c1chars, c2chars, c1savnum, c2savnum)
      if c1chars[c1savnum] == c2chars[c2savnum + 1] & c1chars[c1savnum + 1] == c2chars[c2savnum + 2] & c1chars[c1savnum + 2] == c2chars[c2savnum + 3]  then {
        write("Foe 2!")
        write(file03, "-----------------------------------------------------------------------------------------")
        write(file03, "File 2 has one or more extra characters.")
        i := 0
        while i < 11 do
        { c1num := c1savnum + i
          c2num := c2savnum + i
          if i = 0 then endtext := "<-------" else endtext := " Context"
          write(file03, c1chars[c1num]," ",c2chars[c2num]," ",c1num," ",c2num,endtext)
          i +:= 1
        }
        write(file03," ")
        write("Fum 2!")
        c1num := c1savnum
        c2num := c2savnum + 1
        seek(file01,c1num)
        seek(file02,c2num)
        if not c1 := reads(file01,1) then done := 1
        if not c2 := reads(file02,1) then done := 1
        resolved := 1
        }
    }

#   Case 3: File 2 contains two or more characters that are wrong or in the wrong order.
    write("Case 3: resolved == ",resolved,"")
    if resolved = 0 then {
    }
    
   } # End Main Loop
   close(file03)
   write("Preparing to exit.\n")
   exit()
end

procedure syncUp(c1chars, c2chars, c1savnum, c2savnum)
  missingScore :=0; extraScore := 0; wrongScore := 0; MostLikelyCaseNum := 1
  c1charsSize := *c1chars; c2charsSize := *c2chars
  c1charsMax := c1charsSize + c1savnum - 1
  c2charsMax := c2charsSize + c2savnum - 1

# Case 1: Character missing from file02
  i := c1savnum + 1; j := c2savnum
  while i < c1charsMax do
    {if c1chars[i] == c2chars[j] then missingScore += 1 else break
      i += 1; j += 1
    }

# Case 2: Extra character in file 02
  i := c1savnum; j := c2savnum + 1
  while j < c2charsMax do
    {if c1chars[i] == c2chars[j] then extraScore += 1 else break
      i += 1; j += 1
    }
  if extraScore > missingScore then MostLikelyCaseNum :=2

# Case 3: One or more wrong characters
  i := c1savnum; j := c2savnum
  while i < c1charsMax do
    {if c1chars[i] ~== c2chars[j] then wrongScore += 1 else break
      i += 1; j += 1
    }
  if missingScore = 0 & extraScore = 0 then MostLikelyCaseNum := 3

  returnScores := [mostLikelyCaseNum, missingScore, extraScore, wrongScore]
 
return returnScores
end